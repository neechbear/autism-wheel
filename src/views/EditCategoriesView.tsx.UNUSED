// Edit categories view component following Single Responsibility Principle
// Provides interface for customizing wheel categories with draft state pattern

import React, { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { ArrowLeft, Plus, Save, RefreshCw, RotateCcw } from 'lucide-react';
import CategoryEditorRow from '../components/CategoryEditorRow';
import { useAppContext, appActions } from '../state/AppContext';
import { createDefaultCategories } from '../constants/defaults';
import type { ProfileCategory, LabelData } from '../types';

function EditCategoriesView(): JSX.Element {
  const { state, dispatch } = useAppContext();
  const [draftCategories, setDraftCategories] = useState<ProfileCategory[]>([]);

  // Convert ProfileCategory to LabelData for the action
  const convertToLabelData = (categories: ProfileCategory[]): LabelData[] => {
    return categories.map((category, index) => ({
      id: category.id,
      label: category.name,
      description: category.description,
      icon: category.icon,
      color: category.color,
      originalIndex: index,
    }));
  };

  // Initialize draft state when component mounts
  useEffect(() => {
    setDraftCategories([...state.categories]);
  }, [state.categories]);

  const handleBackToMain = () => {
    dispatch(appActions.setView('main'));
  };

  const handleSaveCategories = () => {
    dispatch(appActions.setCategories(convertToLabelData(draftCategories)));
    handleBackToMain();
  };

  const handleRevertChanges = () => {
    setDraftCategories([...state.categories]);
  };

  const handleDefaultCategories = () => {
    setDraftCategories(createDefaultCategories());
  };

  const handleAddCategory = () => {
    const newCategory: ProfileCategory = {
      id: `category-${Date.now()}`,
      name: 'New Category',
      description: 'Description for the new category',
      icon: '‚ùì',
      color: '#e2e8f0'
    };
    setDraftCategories([...draftCategories, newCategory]);
  };

  const handleUpdateCategory = (id: string, updates: Partial<ProfileCategory>) => {
    setDraftCategories(categories =>
      categories.map(cat =>
        cat.id === id ? { ...cat, ...updates } : cat
      )
    );
  };

  const handleDeleteCategory = (id: string) => {
    setDraftCategories(categories =>
      categories.filter(cat => cat.id !== id)
    );
  };

  const hasChanges = JSON.stringify(draftCategories) !== JSON.stringify(state.categories);

  return (
    <div className="min-h-screen bg-background text-foreground">
      <div className="container mx-auto p-4 space-y-6">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold">Edit Categories</h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Customize the categories displayed on your wheel. You can change names, descriptions,
            icons, colors, and reorder them. Changes are saved locally and will be included when
            you share your profile.
          </p>
        </div>

        {/* Action buttons */}
        <div className="flex flex-wrap gap-2 justify-center">
          <Button onClick={handleBackToMain} variant="outline" className="gap-2">
            <ArrowLeft className="w-4 h-4" />
            Back to Main
          </Button>

          <Button
            onClick={handleSaveCategories}
            disabled={!hasChanges}
            className="gap-2 bg-blue-600 hover:bg-blue-700 text-white"
            style={!hasChanges ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
          >
            <Save className="w-4 h-4" />
            Save Categories
          </Button>

          <Button
            onClick={handleRevertChanges}
            variant="destructive"
            disabled={!hasChanges}
            className="gap-2"
            style={!hasChanges ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
          >
            <RotateCcw className="w-4 h-4" />
            Revert Changes
          </Button>

          <Button onClick={handleDefaultCategories} variant="destructive" className="gap-2">
            <RefreshCw className="w-4 h-4" />
            Default Categories
          </Button>

          <Button onClick={handleAddCategory} variant="outline" className="gap-2">
            <Plus className="w-4 h-4" />
            Add Category
          </Button>
        </div>

        {/* Categories list */}
        <div className="space-y-4">
          <h2 className="text-2xl font-semibold text-center">Categories</h2>
          <div className="space-y-4">
            {draftCategories.map((category) => (
              <CategoryEditorRow
                key={category.id}
                category={category}
                onUpdate={handleUpdateCategory}
                onDelete={handleDeleteCategory}
              />
            ))}
          </div>
        </div>

        {/* Bottom action buttons */}
        <div className="flex justify-center gap-4 pt-8">
          <Button onClick={handleBackToMain} variant="outline" size="lg">
            Cancel
          </Button>
          <Button
            onClick={handleSaveCategories}
            disabled={!hasChanges}
            className="bg-blue-600 hover:bg-blue-700 text-white"
            size="lg"
            style={!hasChanges ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
          >
            Save Changes
          </Button>
        </div>
      </div>
    </div>
  );
}

export default EditCategoriesView;